The ``1-my_list`` module
======================

This is a text file in reStructuredText format to test the above module.

Using ``MyList``
-------------------

First import ``MyList`` from the ``1-my_list`` module:

    >>> MyList = __import__('1-my_list').MyList

Now use it:

    >>> l1 = MyList()
    >>> type(l1)
    <class '1-my_list.MyList'>

    >>> print(l1)
    []

This Class inherits from list

    >>> issubclass(MyList, list)
    True

This class only defines one extra function compare to list: print_sorted

    >>> 'print_sorted' in dir(MyList)
    True

    >>> l2 = [3, 7, 0, 1, 6]
    >>> l2.print_sorted()
    Traceback (most recent call last):
    AttributeError: 'list' object has no attribute 'print_sorted'

It is assumed all the elements of the list will be integers.

    >>> def test_i(tests=[]):
    ...    for test in tests:
    ...	          try:
    ...		      test.print_sorted()
    ...	          except Exception as e:
    ...		      print("[{}] {}".format(e.__class__.__name__, e))
    ...

``print_sorted`` prints the elements in sorted order, but does not change
the order of the elements in the list.

    >>> l1.print_sorted()
    []

    >>> l3 = MyList(l2)
    >>> print(l3)
    [3, 7, 0, 1, 6]

    >>> l3.print_sorted()
    [0, 1, 3, 6, 7]

    >>> print(l3)
    [3, 7, 0, 1, 6]

Works with negative numbers as well

    >>> l4 = MyList([-2513461346364, -1285720873193, 0, -345662577682686554, 1])
    >>> l4
    [-2513461346364, -1285720873193, 0, -345662577682686554, 1]

    >>> l4.print_sorted()
    [-345662577682686554, -2513461346364, -1285720873193, 0, 1]

    >>> l4
    [-2513461346364, -1285720873193, 0, -345662577682686554, 1]
